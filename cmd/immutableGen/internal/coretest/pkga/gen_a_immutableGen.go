// Code generated by immutableGen. DO NOT EDIT.

package pkga

//immutableVet:skipFile

import (
	"myitcv.io/immutable"
)

//
// PkgA is an immutable type and has the following template:
//
// 	struct {
// 		Address string
// 	}
//
type PkgA struct {
	field_Address string

	mutable bool
	__tmpl  *_Imm_PkgA
}

var _ immutable.Immutable = new(PkgA)
var _ = new(PkgA).__tmpl

func (s *PkgA) AsMutable() *PkgA {
	if s.Mutable() {
		return s
	}

	res := *s
	res.mutable = true
	return &res
}

func (s *PkgA) AsImmutable(v *PkgA) *PkgA {
	if s == nil {
		return nil
	}

	if s == v {
		return s
	}

	s.mutable = false
	return s
}

func (s *PkgA) Mutable() bool {
	return s.mutable
}

func (s *PkgA) WithMutable(f func(si *PkgA)) *PkgA {
	res := s.AsMutable()
	f(res)
	res = res.AsImmutable(s)

	return res
}

func (s *PkgA) WithImmutable(f func(si *PkgA)) *PkgA {
	prev := s.mutable
	s.mutable = false
	f(s)
	s.mutable = prev

	return s
}

func (s *PkgA) IsDeeplyNonMutable(seen map[interface{}]bool) bool {
	if s == nil {
		return true
	}

	if s.Mutable() {
		return false
	}

	if seen == nil {
		return s.IsDeeplyNonMutable(make(map[interface{}]bool))
	}

	if seen[s] {
		return true
	}

	seen[s] = true
	return true
}
func (s *PkgA) Address() string {
	return s.field_Address
}

// SetAddress is the setter for Address()
func (s *PkgA) SetAddress(n string) *PkgA {
	if s.mutable {
		s.field_Address = n
		return s
	}

	res := *s
	res.field_Address = n
	return &res
}
